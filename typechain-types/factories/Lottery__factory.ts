/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Lottery, LotteryInterface } from "../Lottery";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "MIN_DEPOSIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pickWinner",
    outputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "players",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "playersCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "random",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261009560201b60201c565b61009d60201b60201c565b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610161565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610ea8806101706000396000f3fe60806040526004361061008a5760003560e01c80638da5cb5b116100595780638da5cb5b14610251578063a3f67d6d1461027c578063e1e158a5146102a7578063f2fde38b146102d2578063f71d96cb146102fb576101b4565b806312065fe0146101b95780635d495aea146101e45780635ec01e4d1461020f578063715018a61461023a576101b4565b366101b45767016345785d8a000034146100d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100d090610bb3565b60405180910390fd5b6100e1610338565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561014f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014690610b73565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550005b600080fd5b3480156101c557600080fd5b506101ce610361565b6040516101db9190610c13565b60405180910390f35b3480156101f057600080fd5b506101f96103e5565b6040516102069190610b1d565b60405180910390f35b34801561021b57600080fd5b5061022461060c565b6040516102319190610c13565b60405180910390f35b34801561024657600080fd5b5061024f610646565b005b34801561025d57600080fd5b50610266610338565b6040516102739190610b1d565b60405180910390f35b34801561028857600080fd5b506102916106ce565b60405161029e9190610c13565b60405180910390f35b3480156102b357600080fd5b506102bc6106db565b6040516102c99190610c13565b60405180910390f35b3480156102de57600080fd5b506102f960048036038101906102f49190610978565b6106e7565b005b34801561030757600080fd5b50610322600480360381019061031d91906109a1565b6107df565b60405161032f9190610b38565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061036b61081e565b73ffffffffffffffffffffffffffffffffffffffff16610389610338565b73ffffffffffffffffffffffffffffffffffffffff16146103df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d690610bf3565b60405180910390fd5b47905090565b6000600a6103f16106ce565b101561046d576103ff610338565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461046c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046390610bd3565b60405180910390fd5b5b600360018054905010156104b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ad90610b93565b60405180910390fd5b60006104c061060c565b90506000806104e0600a6104d2610361565b61082690919063ffffffff16565b90506000600180549050846104f59190610cc8565b905060018181548110610531577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250610566610338565b73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156105ab573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff166108fc6105ce610361565b9081150290604051600060405180830381858888f193505050501580156105f9573d6000803e3d6000fd5b5061060261083c565b8294505050505090565b6000444260018054905060405160200161062893929190610ae0565b6040516020818303038152906040528051906020012060001c905090565b61064e61081e565b73ffffffffffffffffffffffffffffffffffffffff1661066c610338565b73ffffffffffffffffffffffffffffffffffffffff16146106c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b990610bf3565b60405180910390fd5b6106cc600061084c565b565b6000600180549050905090565b67016345785d8a000081565b6106ef61081e565b73ffffffffffffffffffffffffffffffffffffffff1661070d610338565b73ffffffffffffffffffffffffffffffffffffffff1614610763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075a90610bf3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ca90610b53565b60405180910390fd5b6107dc8161084c565b50565b600181815481106107ef57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600081836108349190610c3f565b905092915050565b6001600061084a9190610910565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b508054600082559060005260206000209081019061092e9190610931565b50565b5b8082111561094a576000816000905550600101610932565b5090565b60008135905061095d81610e44565b92915050565b60008135905061097281610e5b565b92915050565b60006020828403121561098a57600080fd5b60006109988482850161094e565b91505092915050565b6000602082840312156109b357600080fd5b60006109c184828501610963565b91505092915050565b6109d381610c82565b82525050565b6109e281610c70565b82525050565b60006109f5602683610c2e565b9150610a0082610d28565b604082019050919050565b6000610a18601983610c2e565b9150610a2382610d77565b602082019050919050565b6000610a3b601a83610c2e565b9150610a4682610da0565b602082019050919050565b6000610a5e601b83610c2e565b9150610a6982610dc9565b602082019050919050565b6000610a81601683610c2e565b9150610a8c82610df2565b602082019050919050565b6000610aa4602083610c2e565b9150610aaf82610e1b565b602082019050919050565b610ac381610cb4565b82525050565b610ada610ad582610cb4565b610cbe565b82525050565b6000610aec8286610ac9565b602082019150610afc8285610ac9565b602082019150610b0c8284610ac9565b602082019150819050949350505050565b6000602082019050610b3260008301846109d9565b92915050565b6000602082019050610b4d60008301846109ca565b92915050565b60006020820190508181036000830152610b6c816109e8565b9050919050565b60006020820190508181036000830152610b8c81610a0b565b9050919050565b60006020820190508181036000830152610bac81610a2e565b9050919050565b60006020820190508181036000830152610bcc81610a51565b9050919050565b60006020820190508181036000830152610bec81610a74565b9050919050565b60006020820190508181036000830152610c0c81610a97565b9050919050565b6000602082019050610c286000830184610aba565b92915050565b600082825260208201905092915050565b6000610c4a82610cb4565b9150610c5583610cb4565b925082610c6557610c64610cf9565b5b828204905092915050565b6000610c7b82610c94565b9050919050565b6000610c8d82610c94565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b6000610cd382610cb4565b9150610cde83610cb4565b925082610cee57610ced610cf9565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e65722063616e6e6f742070617274696369706174652100000000000000600082015250565b7f4174206c65617374203320706c6179657273206e656564656421000000000000600082015250565b7f456e7472616e63652066656520697320302e3120657468657273210000000000600082015250565b7f596f7520617265206e6f7420746865204f776e65722100000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610e4d81610c70565b8114610e5857600080fd5b50565b610e6481610cb4565b8114610e6f57600080fd5b5056fea26469706673582212200568bed00d425042cfd8348b2a59ac339bf5aef21f7039349c1402e5c465e90164736f6c63430008040033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Lottery> {
    return super.deploy(overrides || {}) as Promise<Lottery>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Lottery {
    return super.attach(address) as Lottery;
  }
  connect(signer: Signer): Lottery__factory {
    return super.connect(signer) as Lottery__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new utils.Interface(_abi) as LotteryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Lottery {
    return new Contract(address, _abi, signerOrProvider) as Lottery;
  }
}
