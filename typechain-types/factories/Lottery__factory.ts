/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Lottery, LotteryInterface } from "../Lottery";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "MIN_DEPOSIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xf2becb7d",
        type: "bytes32",
      },
    ],
    name: "c_0xf2becb7d",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pickWinner",
    outputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "players",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "playersCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "random",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6111888061010d6000396000f3fe6080604052600436106100955760003560e01c8063a3f67d6d11610059578063a3f67d6d146102c1578063e1e158a5146102ec578063f2fde38b14610317578063f71d96cb14610340578063fbf4eb311461037d576101f9565b806312065fe0146101fe5780635d495aea146102295780635ec01e4d14610254578063715018a61461027f5780638da5cb5b14610296576101f9565b366101f9576100c67fa9b0a585f2699a15cfb5a4bef0f4b8af325dff2f2c2c70ab08332cfd9a2ce66860001b6103a6565b6100f27f55421330339c1da305ffa6f2cbf156ce1e0120ad2077c2b9809ba598dab2db4460001b6103a6565b67016345785d8a0000341461013c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013390610ef8565b60405180910390fd5b6101687f7b344ca0db7c961afd1f54bd14d218b19f9559a02de613578984257622ff022760001b6103a6565b6101947f6970e6d972dcee8870e1e8c97765a0725ba67e1a5384d4f5ca747eab5eded2e060001b6103a6565b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550005b600080fd5b34801561020a57600080fd5b506102136103a9565b6040516102209190610f58565b60405180910390f35b34801561023557600080fd5b5061023e6104b1565b60405161024b9190610ec2565b60405180910390f35b34801561026057600080fd5b5061026961090f565b6040516102769190610f58565b60405180910390f35b34801561028b57600080fd5b506102946109cd565b005b3480156102a257600080fd5b506102ab610a55565b6040516102b89190610ec2565b60405180910390f35b3480156102cd57600080fd5b506102d6610a7e565b6040516102e39190610f58565b60405180910390f35b3480156102f857600080fd5b50610301610b0f565b60405161030e9190610f58565b60405180910390f35b34801561032357600080fd5b5061033e60048036038101906103399190610d5d565b610b1b565b005b34801561034c57600080fd5b5061036760048036038101906103629190610daf565b610c13565b6040516103749190610edd565b60405180910390f35b34801561038957600080fd5b506103a4600480360381019061039f9190610d86565b6103a6565b005b50565b60006103b3610c52565b73ffffffffffffffffffffffffffffffffffffffff166103d1610a55565b73ffffffffffffffffffffffffffffffffffffffff1614610427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041e90610f38565b60405180910390fd5b6104537fe69022ba9723b6eaf692b07e9bdec9e5082d3a43924805ad07a6b67baa96529260001b6103a6565b61047f7fef22cc73efb8e15caa0e3421edb832b47999650ece5ea9b1dec8eed608c8f99d60001b6103a6565b6104ab7f20ace8dd1cee9409c40e6f37d3bb3f9b87394c3019d47ad51cc4ddac5ffca6c560001b6103a6565b47905090565b60006104bb610c52565b73ffffffffffffffffffffffffffffffffffffffff166104d9610a55565b73ffffffffffffffffffffffffffffffffffffffff161461052f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052690610f38565b60405180910390fd5b61055b7f5ee9b84d8f075342a2a0cbd0f7a22343a261273b91aa6e6fd7ad8edb0eaa79cb60001b6103a6565b6105877f6cdad86ed6611b3e5480729e89d9e7f73d9806acae66d15aefdae78f118263f060001b6103a6565b6105b37f32a55afbe50ec251aea78e15773495b8de82429042c192dbc3bb04deb969165160001b6103a6565b6105df7fde4c2b88c8b4f1949af4521f1b770e6464b5bf034eb83416966e5b5205f9afae60001b6103a6565b600360018054905010156105f257600080fd5b61061e7f80125bdf523defb5eff45134e918f3c9b6b0377f70125d7b65de39dbdb2bf15260001b6103a6565b61064a7fbc912d61e1614eb428ec44429842aef6447645020e935576d1152899e60c78f160001b6103a6565b6106767f1d6923034e5ef0fda030635879fd3a9831a94ad39ba8413f7f989cd9a9db74c060001b6103a6565b600061068061090f565b90506106ae7fc1d9517658fbceeb61965f68d783b38c3afc76e517847c90da88146116b7128660001b6103a6565b6106da7f5012c80a41039d3da5a982e435a8bb83d9a9c8e5b5f9e1c030da0cf15410b72860001b6103a6565b60006107087f3d6af732100a45061efcf95f6df91bbfa012c8f8149d5fe7812a2d42e01c365360001b6103a6565b6107347fbb32911d82a980b57e6511c8feeebbe114994278b80db4538dcb5d4bad7cbd3960001b6103a6565b6000600180549050836107479190610fe6565b90506107757fbeaba410401c486fbb1333fae4b4b015f8d707c9b31299877436ccb3a2fe819e60001b6103a6565b6107a17fe4e68baaea950a5ca18b8844ef569cf2e2736e7e331ad16990681ba7c15e36f460001b6103a6565b600181815481106107db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506108347fe75b9d04dea3c302c3fc0c3a5dafec9a32d8329444c3a43d229241bff22bd03060001b6103a6565b6108607fd1b21d46556a7f72d491b46e94c10d4100a195c07b32343edeaf69325fb0a67860001b6103a6565b8173ffffffffffffffffffffffffffffffffffffffff166108fc6108826103a9565b9081150290604051600060405180830381858888f193505050501580156108ad573d6000803e3d6000fd5b506108da7f3f702e7d3faf9e599c2200071f216a998b1d76046c7eb36c8a957f87de37a92760001b6103a6565b6109067f94674aedb8496bd6ba61879e08264fd7cdf55c0de31b827936aefa95124c8d7060001b6103a6565b81935050505090565b600061093d7fbe2664d38ad719f9ce82d57df80abc2d3013bf88601e7af00ccc86d15ace9e4b60001b6103a6565b6109697ff4736f2465e6b5b5a77b2c21dda352b0c8fa43583ae53a0c28cd3e2d23fbaea260001b6103a6565b6109957fd72913c6cb81f3cd70fbcdb19475ceb91e8cd003d6dba3a824233c918559bf7c60001b6103a6565b44426001805490506040516020016109af93929190610e85565b6040516020818303038152906040528051906020012060001c905090565b6109d5610c52565b73ffffffffffffffffffffffffffffffffffffffff166109f3610a55565b73ffffffffffffffffffffffffffffffffffffffff1614610a49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4090610f38565b60405180910390fd5b610a536000610c5a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610aac7f204c2090d13d1f519445492e6f7285a704723fdbd131974c44ee80aaa699bc8060001b6103a6565b610ad87fcf826ea1450d1abe8a175fa43448cf8f12aa73371549c9a48e87da1c4ef19a1e60001b6103a6565b610b047fb401a410f506f93af28da1f1db73436e7be23795fa6cc67912d24bffec25833460001b6103a6565b600180549050905090565b67016345785d8a000081565b610b23610c52565b73ffffffffffffffffffffffffffffffffffffffff16610b41610a55565b73ffffffffffffffffffffffffffffffffffffffff1614610b97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8e90610f38565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfe90610f18565b60405180910390fd5b610c1081610c5a565b50565b60018181548110610c2357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081359050610d2d8161110d565b92915050565b600081359050610d4281611124565b92915050565b600081359050610d578161113b565b92915050565b600060208284031215610d6f57600080fd5b6000610d7d84828501610d1e565b91505092915050565b600060208284031215610d9857600080fd5b6000610da684828501610d33565b91505092915050565b600060208284031215610dc157600080fd5b6000610dcf84828501610d48565b91505092915050565b610de181610f96565b82525050565b610df081610f84565b82525050565b6000610e03602383610f73565b9150610e0e82611046565b604082019050919050565b6000610e26602683610f73565b9150610e3182611095565b604082019050919050565b6000610e49602083610f73565b9150610e54826110e4565b602082019050919050565b610e6881610fd2565b82525050565b610e7f610e7a82610fd2565b610fdc565b82525050565b6000610e918286610e6e565b602082019150610ea18285610e6e565b602082019150610eb18284610e6e565b602082019150819050949350505050565b6000602082019050610ed76000830184610de7565b92915050565b6000602082019050610ef26000830184610dd8565b92915050565b60006020820190508181036000830152610f1181610df6565b9050919050565b60006020820190508181036000830152610f3181610e19565b9050919050565b60006020820190508181036000830152610f5181610e3c565b9050919050565b6000602082019050610f6d6000830184610e5f565b92915050565b600082825260208201905092915050565b6000610f8f82610fb2565b9050919050565b6000610fa182610fb2565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b6000610ff182610fd2565b9150610ffc83610fd2565b92508261100c5761100b611017565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4d696e696d756d20656e7472616e63652066656520697320302e31206574686560008201527f7273210000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61111681610f84565b811461112157600080fd5b50565b61112d81610fa8565b811461113857600080fd5b50565b61114481610fd2565b811461114f57600080fd5b5056fea2646970667358221220b98c9cf72097a0ee3215d9e48d42e2548d09701b092ff80c2b5ada58d910987c64736f6c63430008040033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Lottery> {
    return super.deploy(overrides || {}) as Promise<Lottery>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Lottery {
    return super.attach(address) as Lottery;
  }
  connect(signer: Signer): Lottery__factory {
    return super.connect(signer) as Lottery__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new utils.Interface(_abi) as LotteryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Lottery {
    return new Contract(address, _abi, signerOrProvider) as Lottery;
  }
}
